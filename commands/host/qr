#!/usr/bin/env bash

## #ddev-generated
## Description: Generate a QR code for a website
## Usage: qr https|http|share
## Example: "ddev qr" (https is the default), "ddev qr https", "ddev qr http", "ddev qr share", "ddev qr https://ddev.com","ddev qr gitpod"
## Execraw: false
## Flags: []
## AutocompleteTerms: ["http", "share", "gitpod"]

# Call "qrencode" inside the web container
qrencode() {
  ddev . /usr/bin/qrencode  -m 2 -t utf8 "$@"
}

# Encode the gitpod-routed website URL
encode_gitpod_served_website() {
  gp url 8080 | qrencode
  echo "Remember to click 'Share Running Workspace'"
  exit 0;
}

# Encore the primary URL
encode_primary_https() {
  # If we're in a Gitpod workspace, use the Gitpod URL instead.
  if [ "$GITPOD_WORKSPACE_ID" ]; then
    encode_gitpod_served_website
  else
    qrencode $DDEV_PRIMARY_URL
  fi

  exit 0;
}

case $1 in
  https)
    # User requests HTTPS version of site
    encode_primary_https
    ;;
  http)
    # User requests HTTP version of site
    qrencode "http://${DDEV_HOSTNAME}:${DDEV_ROUTER_HTTP_PORT}"
    exit 0;
    ;;
  share)
    if [ "$GITPOD_WORKSPACE_ID" ]; then
      # Assume the User wants the gitpod-routed website, and not the CDE
      encode_gitpod_served_website
    fi

    # User requests the share URL
    # Parse the URL from NGROK's API endpoint. We'll use jq which is inside the web container.
    URL=$(curl -s localhost:4040/api/tunnels | ddev . jq -r '.tunnels[0].public_url')

    # Something went wrong getting $URL. We nudge the use but nothing more.
    if [ -z "$URL" ]; then
      echo "Unable to see the share tunnel. Did you run 'ddev share' first?"
      exit 1;
    fi

    qrencode $URL
    exit 0;
    ;;
  gitpod)
    # This encodes a link to the cloud development environment; aka "served git repository"
    gp url | qrencode
    exit 0;
    ;;
  *)
    # Use primary URL if there are no args
    if [ -z "$1" ]; then
      encode_primary_https;
    fi

    # Try to QR-ify whatever the user has passed in
    qrencode $1
  ;;
esac

exit 0;
